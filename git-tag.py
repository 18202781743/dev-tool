import sys
import argparse
import subprocess
import re
import os
import logging
import json
from datetime import datetime

def setup_logging():
    logging.basicConfig(
        level=logging.INFO,
        format='[%(asctime)s] [%(levelname)s] %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    return logging.getLogger(__name__)

logger = setup_logging()

# 全局参数
class ArgsInfo:
    def __init__(self):
        # 默认值
        self.projectName = "xxxtools" # 项目名称
        self.projectBranch = "master" # 项目分支
        self.projectTag = "1.0.0" # 自定义tag
        self.autoGeneratedProjectTag = False # tag是否自动生成
        self.projectOrg = "linuxdeepin"
        self.projectReviewers = []
        # 从配置文件读取参数
        self.projectRootDir = "~/.cache/git-tag-dir" # 默认值
        config_path = os.path.expanduser('~/.config/dev-tool/git-tag-config.json')
        with open(config_path) as f:
            config = json.load(f)
        
        # Git信息
        self.githubID = config['git']['githubID']     # github 用户id
        self.debEmail = config['git']['debEmail']     # debian 打包邮箱

        # 从配置文件中读取其他参数（如果存在）
        if 'params' in config:
            params = config['params']
            self.projectBranch = params.get('projectBranch', self.projectBranch)
            self.projectOrg = params.get('projectOrg', self.projectOrg)
            self.projectReviewers = params.get('projectReviewers', self.projectReviewers)
            self.projectRootDir = params.get('projectRootDir', self.projectRootDir)

argsInfo = ArgsInfo()

def createRepo():
    try:
        result = subprocess.run(
            ["git", "clone", "https://github.com/" + argsInfo.projectOrg + "/" + argsInfo.projectName + ".git"],
            check=True,
            capture_output=True,
            text=True
        )
        logger.info(f"Successfully cloned repository: {argsInfo.projectOrg}/{argsInfo.projectName}")
        logger.debug(f"Clone output: {result.stdout}")
    except subprocess.CalledProcessError as e:
        logger.error(f"Failed to clone repository {argsInfo.projectOrg}/{argsInfo.projectName}")
        logger.error(f"Error: {e.stderr}")
        raise

def initRepo():
    try:
        # Add github remote
        result = subprocess.run(
            f"git remote add github https://github.com/{argsInfo.githubID}/{argsInfo.projectName}.git",
            shell=True,
            check=True,
            capture_output=True,
            text=True
        )
        logger.info("Successfully added github remote")
        logger.debug(f"Add remote output: {result.stdout}")

        # Set default repo
        result = subprocess.run(
            ["gh", "repo", "set-default", f"{argsInfo.projectOrg}/{argsInfo.projectName}"],
            check=True,
            capture_output=True,
            text=True
        )
        logger.info(f"Successfully set default repository to {argsInfo.projectOrg}/{argsInfo.projectName}")
        logger.debug(f"Set default repo output: {result.stdout}")
    except subprocess.CalledProcessError as e:
        logger.error(f"Failed to initialize repository: {e.stderr}")
        raise
    
def fetchLastTag():
    try:
        # Fetch from origin
        fetch_result = subprocess.run(
            "git fetch origin",
            shell=True,
            check=True,
            capture_output=True,
            text=True
        )
        logger.debug(f"Fetch output: {fetch_result.stdout}")

        # Get last tag
        tag_result = subprocess.run(
            "git describe --tags --abbrev=0",
            shell=True,
            check=True,
            capture_output=True,
            text=True
        )
        lastTag = tag_result.stdout.strip()
        logger.info(f"Found last tag: {lastTag}")
        return lastTag
        
    except subprocess.CalledProcessError as e:
        logger.error(f"Failed to fetch/get last tag: {e.stderr}")
        return None
    except Exception as e:
        logger.error(f"Unexpected error in fetchLastTag: {str(e)}")
        return None

def autoGeneratedTagByLastTag(lastTag):
    increment_part = 'patch'  # 默认递增部分为 'patch' {major}.{minor}.{patch}
    parts = lastTag.split('.')
    if len(parts) != 3:
        raise ValueError(f"无效的版本号格式 '{lastTag}'，应为 major.minor.patch")

    try:
        major = int(parts[0])
        minor = int(parts[1])
        patch = int(parts[2])
    except ValueError:
        raise ValueError(f"版本号各部分必须为整数 '{lastTag}'")
        
    if increment_part == 'patch':
        patch += 1
    elif increment_part == 'minor':
        minor += 1
        patch = 0
    elif increment_part == 'major':
        major += 1
        minor = 0
        patch = 0
    else:
        raise ValueError(f"无效的递增部分 '{increment_part}'，应为 'major', 'minor', 或 'patch'")

    return f"{major}.{minor}.{patch}"

def initTagPR():
    try:
        # Git operations
        subprocess.run(
            "git fetch origin",
            shell=True,
            check=True,
            capture_output=True,
            text=True
        )
        
        subprocess.run(
            ["git", "reset", "--hard", f"origin/{argsInfo.projectBranch}"],
            check=True,
            capture_output=True,
            text=True
        )
        
        subprocess.run(
            f"git checkout -B dev-changelog origin/{argsInfo.projectBranch}",
            shell=True,
            check=True,
            capture_output=True,
            text=True
        )

        # Set DEBEMAIL environment variable
        os.environ["DEBEMAIL"] = argsInfo.debEmail

        lastTag = fetchLastTag()
        logger.info(f"Last Tag: {lastTag}")

        if argsInfo.autoGeneratedProjectTag:
            argsInfo.projectTag = autoGeneratedTagByLastTag(lastTag)
        
        logger.info(f"Project Tag: {argsInfo.projectTag}")

        # Get commit info
        commit_result = subprocess.run(
            ["git", "log", "--pretty=format:%s", "--no-merges", f"{lastTag}..HEAD"],
            check=True,
            capture_output=True,
            text=True
        )
        commitInfo = commit_result.stdout
        if not commitInfo:
            commitInfo = f"Release {argsInfo.projectTag}"

        logger.info(f"Changelog Info: {commitInfo}")

        # Process changelog
        with subprocess.Popen(
            ["xargs", "-d", "\n", "-I", "{}", "dch", "-v", argsInfo.projectTag, "{}"],
            stdin=subprocess.PIPE,
            text=True
        ) as dch_process:
            dch_process.communicate(input=commitInfo)

        subprocess.run(
            "dch -r ''",
            shell=True,
            check=True,
            capture_output=True,
            text=True
        )

        # Commit changes
        subprocess.run(
            ["git", "commit", "-a", "-m", f"chore: bump version to {argsInfo.projectTag}\n\nupdate changelog to {argsInfo.projectTag}"],
            check=True,
            capture_output=True,
            text=True
        )

    except subprocess.CalledProcessError as e:
        logger.error(f"Failed to initialize tag PR: {e.stderr}")
        raise
    except Exception as e:
        logger.error(f"Unexpected error in initTagPR: {str(e)}")
        raise

def createTagPR():
    try:
        # Push to github
        push_result = subprocess.run(
            "git push github dev-changelog -f",
            shell=True,
            check=True,
            capture_output=True,
            text=True
        )
        logger.debug(f"Push output: {push_result.stdout}")

        # Prepare PR creation command
        args = [
            "gh", "pr", "create",
            "--title", f"chore: bump version to {argsInfo.projectTag}",
            "--body", f"update changelog to {argsInfo.projectTag}"
        ]
        
        # Add reviewers if specified
        if argsInfo.projectReviewers:
            reviewers = []
            for value in argsInfo.projectReviewers:
                reviewers.extend(['--reviewer', value])
            args.extend(reviewers)
        
        # Create PR
        pr_result = subprocess.run(
            args,
            check=True,
            capture_output=True,
            text=True
        )
        logger.info(f"Successfully created PR for tag {argsInfo.projectTag}")
        logger.debug(f"PR creation output: {pr_result.stdout}")
        
    except subprocess.CalledProcessError as e:
        logger.error(f"Failed to create tag PR: {e.stderr}")
        raise
    except Exception as e:
        logger.error(f"Unexpected error in createTagPR: {str(e)}")
        raise

def mergePR():
    try:
        merge_result = subprocess.run(
            ["gh", "pr", "merge", "-r", f"{argsInfo.githubID}:dev-changelog"],
            check=True,
            capture_output=True,
            text=True
        )
        logger.info("Successfully merged PR")
        logger.debug(f"Merge output: {merge_result.stdout}")
    except subprocess.CalledProcessError as e:
        logger.error(f"Failed to merge PR: {e.stderr}")
        raise
    except Exception as e:
        logger.error(f"Unexpected error in mergePR: {str(e)}")
        raise

def createOrUpdateRepo():
    dir = os.path.expanduser(argsInfo.projectRootDir)
    if not os.path.exists(dir):
        os.makedirs(dir)
    
    logger.info(f"Tagging project: {dir}, {argsInfo.projectName}")
    os.chdir(dir)

    if not os.path.exists(dir + "/" + argsInfo.projectName):
        createRepo()
        os.chdir(argsInfo.projectName)
        initRepo()
    else:
        os.chdir(argsInfo.projectName)

def main(argv):
    parser = argparse.ArgumentParser(description='Pack for CRP.')
    parser.add_argument('command', nargs='?', default='tag', choices=['tag', 'merge', 'test', 'lasttag'], help='The command type (list or pack)')

    parser.add_argument('--dir', type=str, default=None, help='The project directory')
    parser.add_argument('--org', type=str, default=None, help='The project organization, e.g: linuxdeepin')
    parser.add_argument('--name', type=str, default=None, help='The project name')
    parser.add_argument('--branch', type=str, default=None, help='The project branch')
    parser.add_argument('--tag', type=str, default=None, help='The project tag')
    parser.add_argument('--reviewer', type=str, default=[], nargs='+', help='The project reviewers')

    if "DEBEMAIL" not in os.environ:
        os.environ["DEBEMAIL"] = argsInfo.debEmail

    args = parser.parse_args()

    if (args.name is not None):
        argsInfo.projectName = args.name
    if (args.branch is not None):
        argsInfo.projectBranch = args.branch
    if (args.tag is not None):
        argsInfo.projectTag = args.tag
    else:
        argsInfo.autoGeneratedProjectTag = True
    if (args.dir is not None):
        argsInfo.projectRootDir = args.dir
    if (args.org is not None):
        argsInfo.projectOrg = args.org
    reviewers = args.reviewer
    if len(reviewers) > 0:
        argsInfo.projectReviewers = reviewers

    createOrUpdateRepo()
    if (args.command == 'merge'):
        mergePR()
    elif (args.command == 'test'):
        initTagPR()
        try:
            diff_result = subprocess.run(
                "git diff HEAD^ HEAD | cat",
                shell=True,
                check=True,
                capture_output=True,
                text=True
            )
            print(diff_result.stdout)
        except subprocess.CalledProcessError as e:
            logger.error(f"Failed to show diff: {e.stderr}")
    elif (args.command == 'lasttag'):
        lastTag = fetchLastTag()
        logger.info(f"Last Tag: {lastTag}")
    else:
        initTagPR()
        createTagPR()

if(__name__=="__main__"):
    main(sys.argv)
