#!/bin/bash

# 工具主目录
TOOL_DIR="$(dirname "$(readlink -f "$0")")"
VENV_DIR="$HOME/.local/venv"

# 检查并执行 Python 脚本
run_python_script() {
    local script="$1"
    shift
    if [[ ! -f "$script" ]]; then
        echo "Error: $script not found in $TOOL_DIR"
        exit 1
    fi
    
    # 在虚拟环境中执行脚本
    source "$HOME/.local/venv/bin/activate"
    python "$script" "$@"
    deactivate
}

# findicon 子命令实现
run_findicon() {
    local deepin_iconfinder="$TOOL_DIR/deepin-iconfinder"
    
    # 检查 deepin-iconfinder 脚本是否存在
    if [[ ! -x "$deepin_iconfinder" ]]; then
        echo "Error: deepin-iconfinder script not found at $deepin_iconfinder" >&2
        echo "Please ensure the deepin-iconfinder script is in the same directory as dev-tool" >&2
        exit 1
    fi
    
    # 直接调用 deepin-iconfinder 脚本
    exec "$deepin_iconfinder" "$@"
}

# 显示帮助信息
show_help() {
    echo "Usage: $0 [crp|git|config|findicon] [command] [options]"
    echo ""
    echo "Subcommands:"
    echo "  crp      Manage CRP packages (calls package-crp.py)"
    echo "  git      Manage git tags (calls git-tag.py)"
    echo "  config   Edit configuration files (crp/git)"
    echo "  upgrade  Upgrade dev-tool to latest version"
    echo "  batch-crp      Batch process CRP packages (calls batch-package-crp.py)"
    echo "  batch-git      Batch process git tags (calls batch-git-tag.py)"
    echo "  findicon       Find deepin system icons (calls deepin-iconfinder)"
    echo ""
    echo "Examples:"
    echo "  $0 crp pack --name dtk6 --branch upstream/master"
    echo "  $0 git tag --name dtk6 --org linuxdeepin"
    echo "  $0 config crp    # Edit CRP config"
    echo "  $0 config git    # Edit git tag config"
    echo "  $0 batch-crp --config batch-config.json"
    echo "  $0 findicon deepin-music  # Find deepin-music icon"
    exit 0
}

# 主逻辑
case "$1" in
    crp)
        shift
        run_python_script "$TOOL_DIR/package-crp.py" "$@"
        ;;
    git)
        shift
        run_python_script "$TOOL_DIR/git-tag.py" "$@"
        ;;
    config)
        shift
        CONFIG_DIR="$HOME/.config/dev-tool"
        if [[ "$1" == "crp" ]]; then
            if [[ "$2" == "set" && -n "$3" ]]; then
                IFS='=' read -r key value <<< "$3"
                # 如果是设置password，则调用genpwd生成加密密码
                if [[ "$key" == "auth.password" ]]; then
                    encrypted_pwd=$(source "$VENV_DIR/bin/activate" && python "$TOOL_DIR/gen-crp-pwd.py" <<< "$value" && deactivate)
                    jq_filter=".auth.password=\"$encrypted_pwd\""
                else
                    # 将点号路径转换为jq路径
                    jq_path=".${key//./.}"
                    # 如果值是数字则不添加引号，否则添加
                    if [[ "$value" =~ ^[0-9]+$ ]]; then
                        jq_filter="${jq_path}=${value}"
                    else
                        jq_filter="${jq_path}=\"${value}\""
                    fi
                fi
                jq "${jq_filter}" "$CONFIG_DIR/package-crp-config.json" > "$CONFIG_DIR/package-crp-config.json.tmp" && \
                mv "$CONFIG_DIR/package-crp-config.json.tmp" "$CONFIG_DIR/package-crp-config.json"
            else
                ${EDITOR:-vi} "$CONFIG_DIR/package-crp-config.json"
            fi
        elif [[ "$1" == "git" ]]; then
            if [[ "$2" == "set" && -n "$3" ]]; then
                IFS='=' read -r key value <<< "$3"
                # 将点号路径转换为jq路径
                jq_path=".${key//./.}"
                # 如果值是数字则不添加引号，否则添加
                if [[ "$value" =~ ^[0-9]+$ ]]; then
                    jq_filter="${jq_path}=${value}"
                else
                    jq_filter="${jq_path}=\"${value}\""
                fi
                jq "${jq_filter}" "$CONFIG_DIR/git-tag-config.json" > "$CONFIG_DIR/git-tag-config.json.tmp" && \
                mv "$CONFIG_DIR/git-tag-config.json.tmp" "$CONFIG_DIR/git-tag-config.json"
            else
                ${EDITOR:-vi} "$CONFIG_DIR/git-tag-config.json"
            fi
        else
            echo "Usage: $0 config [crp|git] [set <key=value>]"
            echo "Examples:"
            echo "  $0 config crp set auth.userId=ut0000"
            echo "  $0 config git set params.projectBranch=newbranch"
            exit 1
        fi
        ;;
    findicon)
        shift
        run_findicon "$@"
        ;;
    gen-crp-pwd)
        shift
        run_python_script "$TOOL_DIR/gen-crp-pwd.py" "$@"
        ;;
    upgrade)
        echo "Upgrading dev-tool..."
        curl -sSL https://raw.githubusercontent.com/18202781743/dev-tool/main/install-from-github.sh | bash
        echo "Upgrade completed successfully"
        ;;
    batch-crp)
        shift
        run_python_script "$TOOL_DIR/batch-package-crp.py" "$@"
        ;;
    batch-git)
        shift
        run_python_script "$TOOL_DIR/batch-git-tag.py" "$@"
        ;;
    -h|--help|help)
        show_help
        ;;
    *)
        echo "Error: Unknown subcommand '$1'"
        show_help
        exit 1
        ;;
esac
